// Generated by CoffeeScript 1.12.7
var errors, fs, path, watchModule, watchModules;

path = require("path");

fs = require("fsx");

exports.watch = function(args) {
  var dirs;
  log.moat(1);
  log.gray("Crawling...");
  log.moat(1);
  dirs = args._;
  if (!dirs.length) {
    dirs.push(lotus.path);
  }
  Promise.all(dirs, function(dir) {
    var configPath;
    dir = path.resolve(dir);
    if (!fs.isDir(dir)) {
      throw Error("Path must be a directory!");
    }
    configPath = path.join(dir, "package.json");
    if (fs.isFile(configPath)) {
      return watchModule(dir);
    } else {
      return watchModules(dir);
    }
  }).then(function() {
    var green;
    green = log.color.green;
    log.moat(1);
    log.white("Found " + (green(lotus.modules.length)) + " modules!");
    return log.moat(1);
  });
  return Promise.defer().promise;
};

watchModule = function(dir) {
  var mod;
  mod = lotus.modules.load(dir);
  return mod.load(["config", "plugins"]).fail(errors.loadModule);
};

watchModules = function(dir) {
  var deferred, watcher;
  deferred = Promise.defer();
  watcher = lotus.watchModules(dir);
  watcher.on("add", function(mod) {
    return mod.load(["config", "plugins"]).fail(errors.loadModule);
  });
  watcher.on("unlink", function(mod) {
    return log.warn("Module was deleted, but went unhandled: '" + mod.path + "'");
  });
  watcher.on("ready", function(mods) {
    return Promise.all(mods, function(mod) {
      return mod.load(["config", "plugins"]).fail(errors.loadModule);
    }).then(deferred.resolve).fail(deferred.reject);
  });
  return deferred.promise;
};

errors = {};

errors.loadModule = function(error) {
  if (/^Missing config file:/.test(error.message)) {
    return;
  }
  throw error;
};
