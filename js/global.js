// Generated by CoffeeScript 1.12.4
var Event, LazyVar, assertType, createMatcher, emptyFunction, fs, isMatch, isType, path;

isMatch = require("micromatch").isMatch;

emptyFunction = require("emptyFunction");

assertType = require("assertType");

LazyVar = require("LazyVar");

isType = require("isType");

Event = require("eve");

path = require("path");

fs = require("fsx");

lotus.didFileChange = Event();

lotus.watchFiles = function(pattern, options, callback) {
  var isIgnored, isIncluded;
  if (arguments.length === 1) {
    callback = pattern;
    pattern = null;
    options = {};
  } else if (arguments.length === 2) {
    callback = options;
    if (isType(pattern, Object)) {
      options = pattern;
      pattern = null;
    } else {
      options = {};
    }
  }
  assertType(pattern, String.or(Array).Maybe, "pattern");
  assertType(options, Object.Maybe, "options");
  assertType(callback, Function, "callback");
  isIncluded = pattern != null ? createMatcher(pattern) : emptyFunction.thatReturnsTrue;
  isIgnored = options.ignored != null ? createMatcher(options.ignored) : emptyFunction.thatReturnsFalse;
  return lotus.didFileChange(function(event, file) {
    if (isIncluded(file.path)) {
      if (isIgnored(file.path)) {
        return;
      }
      callback(event, file);
    }
  });
};

lotus.watchModules = (function() {
  var ModuleWatcher;
  ModuleWatcher = LazyVar(function() {
    return require("./ModuleWatcher");
  });
  return function(root, options) {
    assertType(root, String);
    assertType(options, Object.Maybe);
    if (root[0] === ".") {
      root = path.resolve(process.cwd(), root);
    }
    if (!fs.isDir(root)) {
      throw Error("Expected a directory: '" + root + "'");
    }
    return ModuleWatcher.call(root, options);
  };
})();

createMatcher = function(pattern) {
  if (Array.isArray(pattern)) {
    pattern = "(" + pattern.join("|") + ")";
  }
  return function(file) {
    return isMatch(file.path, pattern);
  };
};
